/*
* Title: Math Tutor V3
* Programmer (s):Jacob Diedrichsen, Dane McClary
* Date: 2025.10.10
* Github: https://github.com/DaneMcClary/MathTutor-V3
*Description: An increasingly difficult Math Tutor to help students learn.
*Description 2:
*/

#include <iostream>
#include <string>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <ios>
#include <limits>
#include <random>


using namespace std;

void getline(const istream & cin, int user_choice);

bool operator<(int lhs, const string & rhs);

int main() {

 std::srand(std::time(0));


   string name = "?"; // Gets the users name
   string userChoice = "?; //

    const int MAX_ATTEMPTS = 3; // How many attempts the user has.
    const int LEVEL_CHANGE = 10; // Level of increase in the problem.

    int leftn = 0; // left number of the problem
    int rightn = 0; // right number of problem
    int product = 0; // used to make all division problems have whole numbers
    int tempVar = 0; // used to make sure subtraction problems dont give negatives
    int correctAnswer = 0; // The correct answer to the problem
    int userAnswer = 0; // The answer the user enters into the problem.
    int totalCorrect = 0; // The total number of answers the user gets correct
    int totalIncorrect = 0; // The total number of answers the user gets incorrect
    int mathLevel = 1; // The level of difficult of the math problem
    int currentRange = LEVEL_CHANGE; // Assigns the difficulty of the problem



    enum MathType {MT_ADD, MT_SUB, MT_MUL, MT_DIV};
    MathType mathType = MT_ADD;

    std::srand(std::time(nullptr));

    //   /\  Input any new values here please!
    cout <<   R"(****************************************************************)" << endl;
    cout <<   R"(  __  __       _   _         __  __       _   _                 )" << endl;
    cout <<   R"( |  \/  | __ _| |_| |__     |  \/  | __ _| |_| |_ ___ _ __ ___  )" << endl;
    cout <<   R"( | |\/| |/ _` | __| '_ \    | |\/| |/ _` | __| __/ _ \ '__/ __| )" << endl;
    cout <<   R"( | |  | | (_| | |_| | | |   | |  | | (_| | |_| ||  __/ |  \__ \ )" << endl;
    cout <<   R"( |_|  |_|\__,_|\__|_| |_|   |_|  |_|\__,_|\__|\__\___|_|  |___/ )" << endl;
    cout <<   R"(  _____      _                __     _______                    )" << endl;
    cout <<   R"( |_   _|   _| |_ ___  _ __    \ \   / /___ /                    )" << endl;
    cout <<   R"(   | || | | | __/ _ \| '__|    \ \ / /  |_ \                    )" << endl;
    cout <<   R"(   | || |_| | || (_) | |        \ V /  ___) |                   )" << endl;
    cout <<   R"(   |_| \__,_|\__\___/|_|         \_/  |____/                    )" << endl;
    cout <<   R"(****************************************************************)" << endl;
        cout << "Math is good for your brain." << endl;
        cout << "So lets feed your brain some math!" << endl << endl;
        cout << "What is your name my pupil? :";
        getline(cin, name); // gets the users name
        cout << "Hello ";
        cout << name << ". Lets learn some math!!!" << endl;
    // This is the introduction of the program before the math. Only one string value used.

    // generating the random numbers and math type
    do {
       // Reset attempts for the new problem
       int remainingAttempts = MAX_ATTEMPTS;
       bool answeredCorrectly = false;


       // Generate random numbers and math type, using currentRange for max value
       leftn = std::rand() % currentRange + 1;
       rightn = std::rand() % currentRange + 1;
       mathType = static_cast<MathType>(rand() % 4);


switch (mathType) {
           case MT_ADD:
               correctAnswer = leftn + rightn;
               break;


           case MT_SUB:

               if (leftn < rightn) {
                 tempVar = leftOperand;
                leftOperand  = rightOperand;
                rightOperand = tempVar;
               }
               correctAnswer = leftn - rightn;
               break;


           case MT_MUL:
               correctAnswer = leftn * rightn;
               break;


           case MT_DIV:
               product = leftn * rightn;
               correctAnswer = product / rightn;
               break;


           default:
               cout << "Display error -1" << endl;
               userChoice = "n";
               continue;
       }
for (int i = 1; i <= MAX_ATTEMPTS; i++) {
                    cout << "[Level #" << mathLevel << "] " << name << ", what does " << leftn << "*" << rightn << "=";
                    break;
                }
return 0
}

